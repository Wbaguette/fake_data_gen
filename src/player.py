from faker import Faker
import random
from team import Team

fake = Faker()

path = "../tables/player.csv"
# The possible positions a player can play in soccer
player_positions = ["GK", "CB", "LB", "RB", "CDM", "CM", "CAM", "LM", "RM", "LW", "RW", "ST"]

class Player:
   def __init__(self, player_id: int, player_name: str, player_age: int, player_pos: str, player_jersey: int, player_team: int):
      self.player_id: int = player_id
      self.player_name: str = player_name
      self.player_age: int = player_age
      self.player_pos: str = player_pos
      self.player_jersey: int = player_jersey
      self.player_team: int = player_team
      
   # Make sure this matches the order of the attributes in the schema.sql file
   def __str__(self):
      return f"{self.player_id},{self.player_name},{self.player_age},{self.player_pos},{self.player_jersey},{self.player_team}"

# Will somehow need the player objects for other tables' generation (consistency)
def gen_players(teams: [Team]) -> [Player]:
   # 15 players each team
   num_players = len(teams) * 15
   # Will need to use the [Team] from gen_teams to properly map a player to a team
   # TODO: Change this for loop to loop through the teams list and generate 15 players for each team, this will make consistency easier within a team
   for i in range(num_players):
      player_id = i + 1
      player_name = fake.unique.male_full_name()
      # If you're over 35 playing professional soccer, you're cracked
      player_age = random.randint(18, 35)
      
      # These below attributes are gunna have to be randomly generated by taking from a list of possible values
      
      player_pos = fake.random_element(player_positions)
      player_jersey = random.randint(1, 99)
      
# Write to the csv file
def write_players(players: [Player]):
   with open(path, "w+") as f:
      for player in players:
         f.write(str(player) + "\n")

